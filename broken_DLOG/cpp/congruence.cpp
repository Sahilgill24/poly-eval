// congruence implementation

#include <stdio.h>
#include <gmp.h>
#include <string>
#include <utility>

std::string congruence(const mpz_t p, const mpz_t g, mpz_t t, mpz_t r, mpz_t c)
{
    mpz_t t_norm, c_norm, d, p_norm, one;

    // initialize the values
    mpz_init(t_norm);
    mpz_init(c_norm);
    mpz_init(d);
    mpz_init(p_norm);
    mpz_init(one);

    mpz_set_ui(one, 1);
    mpz_sub(t_norm, t, r);
    mpz_set(c_norm, c);
    mpz_sub(p_norm, p, one);

    // gcd calculation
    mpz_gcd(d, t_norm, p_norm);

    mpz_cdiv_q(t_norm, t_norm, d);
    mpz_cdiv_q(c_norm, c_norm, d);
    mpz_cdiv_q(p_norm, p_norm, d);
    // now we get our values
    if (mpz_invert(c_norm, c_norm, p_norm) != 0)
    {
        mpz_mul(t_norm, t_norm, c_norm);
        mpz_mod(t_norm, t_norm, p_norm);
        return std::string(mpz_get_str(NULL, 10, t_norm));
    };

    return std::string("0");
}

// std::string string_to_mpz(const std::string &str){
//     mpz_t result;
//     mpz_init(result);

//     mpz_set_str(result, str.c_str(), 10);
//     return mpz_get_str(NULL,10,result);
// }
// cannot return mpz_t directly

int verification(const mpz_t p, const mpz_t g, const mpz_t x, const mpz_t h)
{
    mpz_t gx;
    mpz_init(gx);

    // gx = g^x mod p
    mpz_powm(gx, g, x, p);

    return mpz_cmp(gx, h);
}

int main()
{
    std::string t_str, r_str, c_str, p_str, g_str, h_str, result;
    
    g_str = "21744646143243216057020228551156208752703942887207308868664445275548674736620508732925764357515199547303283870847514971207187185912917434889899462163342116463504651187567271577773370136574456671482796328194698430314464307239426297609039182878000113673163760381575629928593038563536234958563213385495445541911168414741250494418615704883548296728080545795859843320405072472266753448906714605637308642468422898558630812487636188819677130134963833040948411243908028200183454403067866539747291394732970142401544187137624428138444276721310399530477238861596789940953323090393313600101710523922727140772179016720953265564666";
    p_str = "21847359589888208475506724917162265063571401985325370367631361781114029653025956815157605328190411141044160689815741319381196532979871500038979862309158738250945118554961626824152307536605872616502884288878062467052777605227846709781850614792748458838951342204812601838112937805371782600380106020522884406452823818824455683982042882928183431194593189171431066371138510252979648513553078762584596147427456837289623008879364829477705183636149304120998948654278133874026711188494311770883514889363351380064520413459602696141353949407971810071848354127868725934057811052285511726070951954828625761984797831079801857828431";
    c_str = "71778295986317464977181358951733941026818952858286003634564124680358033840379585505943440223381732309059767994475589178857749561223221520781996969649457324093122032073466344010212086647833256617483980995376446966096288489787358374855411062932987688832004337428232104632177155706591924834977564049130435850596";
    t_str = "9312646501987776677123069996165334953320238908514227830892894577967066010696080028032345464092038552178334908514757885668168857837159455619655708977528533978424087822692334952394425457616804123105906796449332890016607809976150608314165053890213678247959214214602749195694451747310100020199660344584515222600627105504679940926315507796335602231758745928978650450797822806071056984134";
    h_str = "2379943664994463434447180799986543062713483099464815442605819358024518874205912039079297734838557301077499485690715187242732637166621861199722810552790750351063910501376656279916109818380142480153541630024844375987866909360327482454547879833328229210199064615160934199590056906292770813436916890557374599901608776771002737638288892742464424376302165637115904125111643815237390808049788607647462153922322177386615212924778476029834861337534317344050414511899408665633738083462745720713477559240135989896733710248600757926137849819921071458210373753356840504150106675895043640641251817448597517740418989043930823670446";
    r_str = "996179739629170";

    mpz_t t, r, c, p, g, h,x;

    mpz_init(t);
    mpz_init(r);
    mpz_init(c);
    mpz_init(p);
    mpz_init(g);
    mpz_init(h);
    mpz_init(x);

    // set their values from strings here
    mpz_set_str(t, t_str.c_str(), 10);
    mpz_set_str(r, r_str.c_str(), 10);
    mpz_set_str(c, c_str.c_str(), 10);
    mpz_set_str(p, p_str.c_str(), 10);
    mpz_set_str(g, g_str.c_str(), 10);
    mpz_set_str(h, h_str.c_str(), 10);

    result = congruence(p, g, t, r, c);
    if (result != "0")
    {
        mpz_set_str(x, result.c_str(), 10);
        if (verification(p, g, x, h) == 0)
        {
            printf("correct\n");
            printf("x: %s\n", result.c_str());
        }
        else
        {
            printf("incorrect\n");
        }
    }
    else
    {
        printf("no solution\n");
    }
    return 0;
}